// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  knownUserIds String[] @db.Text

  vaults Vault[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AccessLevel {
  OWNER
  VIEWER
  EDITOR
}

model Vault {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  name  String
  users User[]

  githubRepoId Int?
  githubRepo   GithubRepo? @relation(fields: [githubRepoId], references: [id])
  branch       String

  files File[]
}

model GithubRepo {
  id             Int     @id @default(autoincrement())
  owner          String
  repo           String
  installationId Int
  Workspace      Vault[]
}

enum FileType {
  FILE
  FOLDER
}

model File {
  id        Int    @id @default(autoincrement())
  public_id String @db.VarChar(12)

  path     String @db.VarChar(64)
  filename String @db.VarChar(128)
  data     Bytes  @db.ByteA

  vault   Vault @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  vaultId Int

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latest    Boolean  @default(true)

  type FileType

  @@unique([vaultId, public_id, latest])
  @@unique([vaultId, path, latest])
  @@index([public_id, latest], name: "public_id_latest")
}
