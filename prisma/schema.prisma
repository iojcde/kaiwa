// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  wsToken       String?   @unique
  accounts      Account[]
  sessions      Session[]

  posts Post[]

  knownUserIds String[] @db.Text

  access Access[]
  Invite Invite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  public   Boolean  @default(false)
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  authorId String
  access   Access[]
  Invite   Invite[]
}

enum AccessLevel {
  OWNER
  VIEWER
  EDITOR
}

model Access {
  id     String      @id @default(cuid())
  level  AccessLevel
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Invite {
  id          String      @id @default(cuid())
  email       String      @unique
  post        Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  invitedBy   User        @relation(fields: [invitedById], references: [id], onDelete: Cascade)
  invitedById String
  level       AccessLevel
}
